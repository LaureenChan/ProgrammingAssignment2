install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
x<-1:10
if (x>5){x <-0}
f <-function(x){g<-function(y){y+z}}
f<-function(x){{g<-function(y){y+z}}z<-4 x+g(x)}
f<-function(x){
g<-function(y)
y+z
}
z<-4
x+ g(x)
}
z<-10
f(3)
f<-function(x){
g<-function(y)
y+z
}
z<-4
x+ g(x)
}
z<-10
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+ g(x)
}
z<-10
f(3)
f <-function(x){
g <- function(y){
y+z
}
z<-4
x + g(x)
}
z <- 10
f(3)
?solve
x<- matrix(1:4,2,2)
x
setwd("C:/Users/Laureen/datasciencecoursera/ProgrammingAssignment2")
source(cachematrix.R)
source('cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
test<-makeCacheMatrix(x)
test$get()
test$setinverse()
test$setinverse()
source('cachematrix.R')
source('cachematrix.R')
test<-makeCacheMatrix(matrix(1:4,2,2))
test$get()
test$setinverse
test2<-cacheSolve(test)
test2<-cacheSolve(test)
source('cachematrix.R')
test1<-makeCacheMatrix(x=matrix(1:4,2,2))
test2<-cacheSolve(x)
test2<-cacheSolve(test1)
x<-matrix(1:4,2,2)
x
solve(x)
test2<-cacheSolve(test1)
source('cachematrix.R')
test2<-cacheSolve(test1)
source('cachematrix.R')
test2<-cacheSolve(test1)
source('cachematrix.R')
test1<-makeCacheMatrix(x=matrix(1:4,2,2))
test2<-cacheSolve(test1)
source('cachematrix.R')
test1<-makeCacheMatrix(x=matrix(1:4,2,2))
test2<-cacheSolve(test1)
source('cachematrix.R')
test1<-makeCacheMatrix(x=matrix(1:4,2,2))
test2<-cacheSolve(test1)
test2
